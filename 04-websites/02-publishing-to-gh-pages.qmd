---
title: "Publishing Quarto website to GitHub Pages"
format: html
author: "Bella"
---

::: callout-important
**Before we begin this exercise, make sure that you already have a [GitHub](https://github.com/) account.**
:::

## Part 1: Create a new Quarto Website project

1.  In Rstudio, go to `File` \> `New Project` \> `New Directory` \> `Quarto Website`
2.  Use this directory name: `second-quarto-website`
3.  Make sure to tick `Create git repository` option.
4.  **Optional**: tick the `Open in new session` at the bottom left of the popup.
5.  Click on `Create Project`

![](images/ghpages-web.jpg){width="650"}

## Part 2: Setting up Quarto Website for GitHub Pages

::: callout-note
Note that we will be using GitHub Action to render the website for us to keep things tidy in the long run!
:::

1.  In RStudio, add the `_site` folder into `.gitignore` file. This file dictates which files should not be included in the git commit and push to the remote repository. Your .gitignore will look something like this:

    ```         
    .Rproj.user
    .Rhistory
    .RData
    .Ruserdata

    /_site/
    ```

    ::: callout-note
    The `_site` folder is where the HTML pages that's generated after the rendering will be saved. Since we will be asking GitHub to do the rendering and publishing, we don't need to commit this folder into our repo. This helps to keep things tidy and avoid *very* messy diffs / conflicts.
    :::

2.  To make sure that the R codes are executed locally (which will help GitHub to build our pages faster), we need to configure our project to use Quarto's freeze feature. Add the following line inside the `_quarto.yml` file:

    ``` yaml
    execute:
      freeze: auto
    ```

3.  Next, render your entire website. Click on `Build` on the top menu and click `Render Website`. You will notice that a new folder called `_freeze` has been created. This is where Quarto will save the "snapshot" of your code execution results.

## Part 3: Publishing to GitHub Pages

[**On your GitHub account:**]{.underline}

1.  Go to Github, and create a new repository with the exact same name as the website project name. Leave everything else empty for now (donâ€™t pick any license type).

2.  Once your repository is created, take note on the `.git` link. it should look something like this: `https://github.com/your-username/second-quarto-website.git`

![](images/gh-pages-init.jpg){fig-align="center"}

[**Back to RStudio:**]{.underline}

1.  Next, go back to your project on RStudio. We are going to link the project and the repo!

2.  Switch to the **Terminal** tab, and type the following commands one by one (press enter after each line and let it finish running before proceeding to the next one).

    ````         
    ```         
    git remote add origin <the .git link to your repo here>

    git branch -M main

    git add .  

    git commit -m "initial commit"

    git push origin main
    ```
    ````

    What these commands do is tell RStudio that we want to link our Quarto website project with the GitHub repository that we just created.

[**Back to GitHub:**]{.underline}

1.  Back to your GitHub account, and refresh your repository. The repository should appear now!

2.  Next, create a new branch in your repository called `gh-pages`. This is the branch that GitHub Pages will use the files to render the website.

### Setting up GitHub Action

[**On your RStudio:**]{.underline}

1.  In your website project, create a folder called `.github` (yes, with the dot included!) and navigate inside this folder

2.  Create a folder called `workflows` inside the `.github` folder

3.  Inside the `workflows` folder, create a new plain txt file and name it `publish.yml` . This is where we can specify our GitHub action list! Put the following text inside `publish.yml`[^1]:

    ``` yaml
    on:
      workflow_dispatch:
      push:
        branches: main

    name: Quarto Publish

    jobs:
      build-deploy:
        runs-on: ubuntu-latest
        permissions:
          contents: write
        steps:
          - name: Check out repository
            uses: actions/checkout@v4

          - name: Set up Quarto
            uses: quarto-dev/quarto-actions/setup@v2

          - name: Render and Publish
            uses: quarto-dev/quarto-actions/publish@v2
            with:
              target: gh-pages
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    ```

    This action will run whenever you push to the `main` branch of your repository. (It will also run when you manually trigger the action from the **Actions** tab of your repository.)

4.  Now we're ready to push this file back to GitHub. Go to your Terminal, and type the following command line by line (hit enter after each command)

    ```         
    git add .  

    git commit -m "initial commit"

    git push origin main
    ```

5.  Once the last line of the above command have been executed, Go back to your GitHub repository page and go to Actions tab. Give it a moment, and once it finishes executing (you should see a green check icon), your site should be ready at this URL: `https://your-username.github.io/second-quarto-website`

[^1]: <https://quarto.org/docs/publishing/github-pages.html#github-action>
